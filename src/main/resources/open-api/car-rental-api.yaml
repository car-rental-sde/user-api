openapi: 3.0.3
info:
  title: car-rental-api
  description: |-
    SDE 2024 project
  version: v1

tags:
  - name: Authentication
  - name: Cars
  - name: Reservations
  - name: Users
  - name: Internal

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestModel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseModel'
        '400':
          description: Bad request


  /cars/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Cars
      summary: Get car by id
      operationId: getCar
      parameters:
        - name: currency
          in: query
          required: false
          schema:
            type: string
            example: EUR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarModel'
        '400':
          description: Bad request
        '404':
          description: Not found

    put:
      tags:
        - Cars
      summary: Update car by id
      operationId: updateCar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarRequestModel'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarModel'
        '400':
          description: Bad request
        '404':
          description: Not found

    delete:
      tags:
        - Cars
      summary: Delete car by id
      operationId: deleteCar
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '404':
          description: Not found

  /cars:
    get:
      tags:
        - Cars
      summary: Searching for cars with filters
      operationId: searchCars
      parameters:
        - name: brand
          in: query
          required: false
          schema:
            type: string

        - name: model
          in: query
          required: false
          schema:
            type: string

        - name: carType
          in: query
          required: false
          schema:
            type: string
            example: Sedan

        - name: fuelType
          in: query
          required: false
          schema:
            type: string
            example: Diesel

        - name: isGearboxAutomatic
          in: query
          required: false
          schema:
            type: boolean

        - name: seatsMin
          in: query
          required: false
          schema:
            type: integer
            default: 0

        - name: seatsMax
          in: query
          required: false
          schema:
            type: integer
            default: 10

        - name: yearMin
          in: query
          required: false
          schema:
            type: integer
            default: 1950

        - name: yearMax
          in: query
          required: false
          schema:
            type: integer
            default: 2100

        - name: dayPriceMin
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0

        - name: dayPriceMax
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 100000

        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date

        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date

        - name: place
          in: query
          required: false
          schema:
            type: string
            example: -77.0364,38.8951

        - name: sortBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CarsSortColumn'

        - name: sortDirection
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortDirection'

        - $ref: '#/components/parameters/PageNumber'

        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarsPaginationResponseModel'
        '400':
          description: Bad request

    post:
      tags:
        - Cars
      summary: Add new car
      operationId: addCar

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarRequestModel'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarModel'
        '400':
          description: Bad request


  /reservations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Reservations
      summary: Get reservation by id
      operationId: getReservation

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationModel'
        '400':
          description: Bad request
        '404':
          description: Not found

    put:
      tags:
        - Reservations
      summary: Update reservation by id
      operationId: updateReservation

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequestModel'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationModel'
        '400':
          description: Bad request
        '404':
          description: Not found

    delete:
      tags:
        - Reservations
      summary: Delete reservation by id
      operationId: deleteReservation

      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '404':
          description: Not found

  /reservations:
    get:
      tags:
        - Reservations
      summary: Searching for reservations with filters
      operationId: searchReservations
      parameters:
        - name: customerExternalId
          in: query
          required: false
          schema:
            type: integer
            format: int64

        - name: carId
          in: query
          required: false
          schema:
            type: integer
            format: int64

        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date

        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date

        - name: sortBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ReservationsSortColumn'

        - name: sortDirection
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortDirection'

        - $ref: '#/components/parameters/PageNumber'

        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationsPaginationResponseModel'
        '400':
          description: Bad request

    post:
      tags:
        - Reservations
      summary: Add new reservation
      operationId: addReservation

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequestModel'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationModel'
        '400':
          description: Bad request


  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Users
      summary: Get user by id
      operationId: getUser

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad request
        '404':
          description: Not found

    put:
      tags:
        - Users
      summary: Update user by id
      operationId: updateUser

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad request
        '404':
          description: Not found

    delete:
      tags:
        - Users
      summary: Delete user by id
      operationId: deleteUser

      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '404':
          description: Not found

  /users:
    post:
      tags:
        - Users
      summary: Add new user
      operationId: addUser

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserModel'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '400':
          description: Bad request


  /internal/brands:
    get:
      tags:
        - Internal
      summary: Get all car brands
      operationId: getBrands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrandModel'
        '400':
          description: Bad request
        '404':
          description: Not found

  /internal/models:
    get:
      tags:
        - Internal
      summary: Get all car models
      operationId: getModels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarModelModel'
        '400':
          description: Bad request
    post:
      tags:
        - Internal
      summary: Add new car model
      operationId: addModel

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarModelRequestModel'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarModelModel'
        '400':
          description: Bad request

  /internal/models/{brandId}:
    parameters:
      - name: brandId
        in: path
        required: true
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Internal
      summary: Get all car models of specific brand
      operationId: getModelsByBrands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarModelModel'
        '400':
          description: Bad request

  /internal/carTypes:
    get:
      tags:
        - Internal
      summary: Get all car types
      operationId: getCarTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarTypeModel'
        '400':
          description: Bad request

  /internal/fuelTypes:
    get:
      tags:
        - Internal
      summary: Get all fuel types
      operationId: getFuelTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FuelTypeModel'
        '400':
          description: Bad request

  /internal/equipmentPieces:
    get:
      tags:
        - Internal
      summary: Get all equipment pieces
      operationId: getEquipmentPieces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EquipmentPieceModel'
        '400':
          description: Bad request

components:
  schemas:
    AuthenticationResponseModel:
      type: object
      properties:
        accessToken:
          type: string

    AuthenticationRequestModel:
      type: object
      properties:
        username:
          type: string
          example: user
        password:
          type: string
          example: password

    CarsPaginationResponseModel:
      type: object
      properties:
        pageNumber:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        totalRecords:
          type: integer
          format: int64
          example: 1
        cars:
          type: array
          items:
            $ref: '#/components/schemas/CarOverviewModel'

    CarOverviewModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        model:
          $ref: '#/components/schemas/CarModelModel'
        dayPrice:
          type: integer
          format: int64
          example: 30
        color:
          type: string
          example: red

    CarModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        model:
          $ref: '#/components/schemas/CarModelModel'
        mileage:
          type: integer
          example: 350000
        equipment:
          type: array
          items:
            $ref: '#/components/schemas/EquipmentPieceModel'
        dayPrice:
          type: integer
          format: int64
          example: 30
        currency:
          type: string
          example: EUR
        color:
          type: string
          example: red

    CarRequestModel:
      type: object
      properties:
        modelId:
          type: integer
          format: int64
          example: 1
        mileage:
          type: integer
          example: 350000
        equipment:
          type: array
          items:
            type: integer
            format: int64
            example: [1, 2, 3]
        dayPrice:
          type: integer
          format: int64
          example: 60
        color:
          type: string
          example: black

    CarModelModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        brand:
          $ref: '#/components/schemas/BrandModel'
        name:
          type: string
          example: Mustang
        productionYear:
          type: integer
          example: 2005
        carType:
          $ref: '#/components/schemas/CarTypeModel'
        fuelType:
          $ref: '#/components/schemas/FuelTypeModel'
        isGearboxAutomatic:
          type: boolean
          example: true
        numberOfDoors:
          type: integer
          example: 4
        numberOfSeats:
          type: integer
          example: 5
        trunkCapacity:
          type: integer
          example: 500
        horsePower:
          type: integer
          example: 530
        avgFuelConsumption:
          type: number
          format: float
          example: 5.3

    CarModelRequestModel:
      type: object
      properties:
        brandId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Mustang
        productionYear:
          type: integer
          example: 2005
        carTypeId:
          type: integer
          format: int64
          example: 1
        fuelTypeId:
          type: integer
          format: int64
          example: 1
        isGearboxAutomatic:
          type: boolean
          example: true
        numberOfDoors:
          type: integer
          example: 4
        numberOfSeats:
          type: integer
          example: 5
        trunkCapacity:
          type: integer
          example: 500
        horsePower:
          type: integer
          example: 530
        avgFuelConsumption:
          type: number
          format: float
          example: 5.3

    BrandModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Ford
        country:
          type: string
          example: USA

    CarTypeModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Coupe

    FuelTypeModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Diesel

    EquipmentPieceModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Air conditioning

    ReservationsPaginationResponseModel:
      type: object
      properties:
        pageNumber:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        totalRecords:
          type: integer
          format: int64
          example: 1
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'

    ReservationModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        car:
          $ref: '#/components/schemas/CarModel'
        beginDate:
          type: string
          format: date
          example: 2025-01-01
        beginPosition:
          type: string
          example: 46.0670,11.1504
        endDate:
          type: string
          format: date
          example: 2025-01-02
        endPosition:
          type: string
          example: 46.0625,11.1156
        isMaintenance:
          type: boolean
          example: false
        cost:
          type: integer
          format: int64
          example: 100
        customer:
          $ref: '#/components/schemas/CustomerModel'

    ReservationRequestModel:
      type: object
      properties:
        carId:
          type: integer
          format: int64
          example: 1
        beginDate:
          type: string
          format: date
          example: 2025-01-01
        beginPosition:
          type: string
          example: 46.0670,11.1504
        endDate:
          type: string
          format: date
          example: 2025-01-02
        endPosition:
          type: string
          example: 46.0625,11.1156
        isMaintenance:
          type: boolean
          example: false
        calculateOnly:
          type: boolean
          example: true
        customer:
          $ref: '#/components/schemas/CustomerRequestModel'

    UsersPaginationResponseModel:
      type: object
      properties:
        pageNumber:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        totalRecords:
          type: integer
          format: int64
          example: 1
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserModel'

    UserModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: user
        email:
          type: string
          format: email
          example: example@example.com
        name:
          type: string
          example: John
        surname:
          type: string
          example: Doe
        userRole:
          $ref: '#/components/schemas/UserRoleModel'

    NewUserModel:
      type: object
      properties:
        username:
          type: string
          example: user
        password:
          type: string
          example: password
        email:
          type: string
          format: email
          example: example@example.com
        name:
          type: string
          example: User1
        surname:
          type: string
          example: User1s
        userRole:
          $ref: '#/components/schemas/UserRoleModel'

    CustomerModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        externalId:
          type: integer
          example: 1
        name:
          type: string
          example: John
        surname:
          type: string
          example: Doe

    CustomerRequestModel:
      type: object
      properties:
        externalId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John
        surname:
          type: string
          example: Doe

    UserRoleModel:
      type: string
      enum:
        - USER
        - ADMIN
        - API_CLIENT

    CarsSortColumn:
      type: string
      enum:
        - ID
        - BRAND
        - MODEL
        - CAR_TYPE
        - IS_GEARBOX_AUTOMATIC
        - FUEL_TYPE
        - NUMBER_OF_SEATS
        - PRODUCTION_YEAR
        - BEGIN_PLACE
      default: ID

    ReservationsSortColumn:
      type: string
      enum:
        - ID
        - BRAND
        - MODEL
        - CAR_TYPE
        - BEGIN_DATE
        - BEGIN_PLACE
        - END_DATE
        - END_PLACE

    UsersSortColumn:
      type: string
      enum:
        - USERNAME
        - NAME
        - SURNAME
        - USER_ROLE

    CustomersSortColumn:
      type: string
      enum:
        - ID
        - EXTERNAL_API_ID
        - NAME
        - SURNAME

    SortDirection:
      type: string
      enum:
        - ASC
        - DESC
      default: ASC

  parameters:
    PageNumber:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 1

    PageSize:
      name: size
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        multipleOf: 10 # matches 10, 20, ...
        default: 20

